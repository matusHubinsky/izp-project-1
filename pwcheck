#include<stdio.h>
#include<limits.h>
#include<stdbool.h>
#include<stdlib.h>

#define MAX_LENGHT 100
#define ERR 13
#define MAX_CHARACTER 126
#define MIN_CHARACTER 32


enum levels {LVL1=1, LVL2=2, LVL3=3, LVL4=4};


typedef struct Stats
{
    int sum;
    int min;
    int number;    
    int symbols[MAX_CHARACTER];
} Stats;


typedef struct s_line
{
    char * ptr;
    bool valid;

} S_line;


void printLine(char line[MAX_LENGHT])
{
    int k = 0;
    for (int i = 0; line[i] != '\0'; i++)
    {
        printf("%c", line[i]);
        k = i;
    }
    printf("%c\n", line[k + 1]);

    // problem s koncom asi?
}


bool compareCharArrays(char cArr1[], char cArr2[])
{
    int lenght1 = 0;
    int lenght2 = 0;

    for (int i = 0; cArr1[i] != '\0'; i++) lenght1++; 
    for (int i = 0; cArr2[i] != '\0'; i++) lenght2++;

    if (lenght1 != lenght2) return false;

    for (int i = 0; i < lenght1; i++)
    {
        if (cArr1[i] != cArr2[i]) return false;
    }
    return true;
}


int getLength(char line[])
{
    int lenght = 1; // zacinan na 1 kvoli termnacnej podmienke
    for (int i = 0; line[i] != '\0'; i++) lenght++;
    return lenght;
}



struct s_line manageInput(S_line s_line, char character, char line[])
{
    int i = 0;
    int ord = character;
    while ((ord != ERR) && (i < MAX_LENGHT) && (character != EOF) && (character != '\n') && (character != '\0'))    
    {
        if ((ord < MIN_CHARACTER) || (ord > MAX_CHARACTER)) s_line.valid = false;     
        line[i] = character;
        line[i + 1] = '\0';
        i++;
        character = getchar();
        ord = character;
    }
    
    /*
    if (i < MAX_LENGHT) line[i] = '\0';
    else s_line.valid = false; 
    */

    if (i >= MAX_LENGHT) s_line.valid = false;

    char * cptr = line; 
    s_line.ptr = cptr;

    return s_line;
}


bool firstCondition(char line[], int lenght)
{
    bool small = false; 
    bool big = false;

    for (int i = 0; i < lenght; i++)
    {
        int ord = (int)line[i];
        if ((ord >= 'A') && (ord <= 'Z')) big = true;
        else if ((ord >= 'a') && (ord <= 'z')) small = true;
        
        if ((small == true) && (big == true)) 
        {
            return true;
        }
    }
    return false;    
}


bool secondCondition(int param, char line[], int lenght)
{
    bool small = false;
    bool big = false;
    bool number = false;
    bool special = false;

    for (int i = 0; i < lenght; i++)
    {
        int ord = (int)line[i];
        if ((ord >= 'A') && (ord <= 'Z')) big = true;
        else if ((ord >= 'a') && (ord <= 'z')) small = true;
        else if ((ord >= '0') && (ord <= '9')) number = true;
        else if ((ord >= ' ') && (ord <= '~')) special = true;
    
        int approved = (int)small + (int)big + (int)number + (int)special;
        if (param <= 4)
        {
            if (approved >= param) return true;  
        } 
        if (param > 4)
        {
            if (approved == 4) return true;  
        } 
    }
    return false; 
}


bool thirdCondition(int param, char line[], int lenght)
{
    int number = 1;
    for (int i = 1; i < lenght; i++)
    {
        if (line[i-1] == line[i]) number++;
        else if (number >= param) return false; 
        else number = 1;
    }
    return true;
}


bool fourthCondition(int param, char line[], int lenght)
{
    bool valid;


    for (int i = 0; i < lenght; i++)
    {
        for (int j = 0; j < lenght; j++) // lenght - i
        {
            valid = true;
            int k = 0;
            for (int p = 0; p < param; p++)
            {       
                if ((line[i + p] == line[j + p]) && (j != i))
                {   
                    k++;
                    valid = false;
                }
                else
                {
                    valid = true;
                }
            }
            if (valid == false && k == param)
            {
                return false;                    
            } 
        }
    }
    return true;
}


bool checkPassword(int level, int param, char line[], int lenght)
{
    bool valid = false;

    if (level == LVL1)
    {
        if (firstCondition(line, lenght)) valid = true;   
    }
    else if (level == LVL2)
    {
        if ((firstCondition(line, lenght)) && (secondCondition(param, line, lenght))) valid = true;
    }
    else if (level == LVL3)
    {
        if ((firstCondition(line, lenght)) && (secondCondition(param, line, lenght)) && (thirdCondition(param, line, lenght))) valid = true;
    }
    else if (level == LVL4)
    {
        if ((firstCondition(line, lenght)) && (secondCondition(param, line, lenght)) && (thirdCondition(param, line, lenght)) && (fourthCondition(param, line, lenght))) valid = true;
    }

    return valid;
}


struct Stats updateStats(Stats stats, char line[], int lenght)
{
    int ord;
    for (int i = 0; i < lenght; i++)
    {
        ord = (int)line[i];
        if ((stats.symbols[ord] == 0) && (ord >= ' ') && (ord <= '~')) stats.symbols[ord]++;
    }
    if (lenght < stats.min) stats.min = lenght - 1;
    stats.sum += (lenght - 1);
    stats.number++;
    return stats;
}


struct Stats prepareStats(Stats stats)
{
    stats.min = MAX_LENGHT;
    stats.number = 0;
    stats.sum = 0;
    for (int i = 0; i < MAX_CHARACTER; i++) stats.symbols[i] = 0;
    return stats;
}


void printStats(Stats stats)
{
    int sum_symbols = 0;
    float priemer;
    for (int i = 0; i < MAX_CHARACTER; i++) sum_symbols += stats.symbols[i];
    
    if (sum_symbols != 0)
    {
        priemer = (float)stats.sum / (float)stats.number;
    }
    else 
    {
        priemer = 0.0f;
        stats.min = 0;
    }   
 
    printf("Statistika:\n");
    printf("Ruznych znaku: %i\n", sum_symbols);
    printf("Minimalni delka: %i\n", stats.min);
    printf("Prumerna delka: %.1f\n", priemer);
}


/*
int manage_argv()
{
    // idem dokedy nenarazim na medzeru
    long long level = stroul();
}
*/


int main(int argc, char *argv[])
{
    // riesenie pre obrovske cisla

    if (argc < 3)
    {
        fprintf(stderr, "chyba, au \n");
        return 1;        
    }

    int number = argc;
    int level = atoi(argv[1]);
    int param = atoi(argv[2]);

    if (level < 1 && level < 4)
    {
        fprintf(stderr, "chyba, au \n");
        return 1;  
    } 
    if (param < 1)
    {
        fprintf(stderr, "chyba, au \n");  
        return 1;
    } 

    Stats stats;
    S_line s_line;

    if (number == 4)
    {
        if (compareCharArrays(argv[3], "--stats"))
        {
            stats = prepareStats(stats);
        }
        else
        {
            fprintf(stderr, "chyba, au \n");  
            return 1; 
        }
    }
    else if (number > 4) 
    {
        fprintf(stderr, "chyba, au \n");  
        return 1;
    }

    char character;
    character = getchar();
 
    while ((character != EOF))
    {
        // s_line.ptr = NULL;
        //s_line.valid = true;

        char line[MAX_LENGHT];
        s_line= manageInput(s_line, character, line);
        char * lineptr = s_line.ptr;

        if (s_line.valid != false) 
        {
            int lenght = getLength(line);
            stats = updateStats(stats, line, lenght);
            if (checkPassword(level, param, line, lenght)) printf("%s\n", lineptr);
        }
        character = getchar();
    }

    if (number >= 4) printStats(stats);

    return 0;
}


// neviem ako zistim bez malloc() neobmedzeny riadok
// hadam ta podmienka pre '\n' bude fungovat

// <> diamant .... signle entry, single exit.....to tiez znie blbo


/*
char first_line[10];
fgets(first_line, 10, stdin);

int level = first_line[0] - '0'; 
int param = first_line[2] - '0';
int c = level + param;
*/

// umpersand natrenovat

// main nemoze mat viac ako 50 riadkov
// pole pole charov

   //  if ((a < 32) || (a > MAX_CHARACTER)) printf("Vcil\n");
